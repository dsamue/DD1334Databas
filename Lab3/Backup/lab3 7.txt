 (:testkommentar:)
(:
let $movies := document("videos.xml")
return $movies//genre
:)


(:1:)
let $movies := document("videos.xml")
return $movies//video[./genre = "special"]/title
,


(:2:)

(:Varför funkar det inte att köra med group by? Inte en del av FLOWR-syntax?:)
(:let $movies := document("videos.xml")
let $director := $movies//director 
return $director
,:)


let $movies := document("videos.xml")
let $directors := $movies//director 

return
for $director in distinct-values($directors)
let $count := count($directors[. eq $director])
where $count >= 2 and $director != ""
let $titles := $movies//video[./director = $director]/title
return (<director>{$director}</director>, $titles)  
,


(:3:)
(:Verkar alltså inte finnas nån form av limit-funktion? Känns också lite oklart att man sorterar på en video i taget:)
(let $videos := document("videos.xml")//video
for $video in $videos
order by $video/user_rating descending
return $video/title)
[position() = 1 to 10]
,

(:4:)
(:
let $actorsID := document("videos.xml")//actors/actor/@id 
let $movies := document("videos.xml")//video

return(
for $actorID in $actorsID
let $count := count($movies/actorRef[. eq $actorID])
order by $count descending
let $result := data($actorID/..[$count = 3]) 
return $result
)
,
:)


(:5:)
(let $videos := document("videos.xml")//video
for $video in $videos
where some $ref in $video//actorRef satisfies $ref = "916503208"
where some $ref in $video//actorRef satisfies $ref = "916503209"
order by $video/user_rating descending
return $video/title)[1]
,

(:6:)
let $actorRefs := document("videos.xml")//video[./rating="PG-13" and ./year >= "1997" and ./year <= "2006"]/actorRef
let $actors := document("videos.xml")//actor
return distinct-values(
for $actor in $actors 
	for $actorRef in $actorRefs
		where $actor/@id = $actorRef
		return $actor)
,

(:7:)
let $db := document("videos.xml")
let $ids := $db//actor/@id
let $result :=
(for $id in $ids 
let $numGen := count(distinct-values($db//video[./actorRef = $id]/genre))
order by $numGen descending
return ($id))[1]
return $db//actor[@id=$result]
,


(:8 här ger alltså for-loopen i sums flera enstaka element och jag måste lägga taggar runt om för att det ska bli ett enda element:)
let $db :=doc("videos.xml")
let $directors := distinct-values($db//director)
let $movies := $db//video
let $sums := <sums>{
	(for $d in $directors 
	 let $sum := sum($movies[./director = $d]/user_rating)
	 return <director>{$d}<sum>{$sum}</sum></director>)
}</sums>
return $sums/director[./sum = max(..//sum)]
,


(:9:)
(let $db := doc("videos.xml")
let $recommended := $db//video[./genre = "horror" and (./dvd_stock > 0 or ./beta_stock > 0 or ./vhs_stock > 0)]
for $movie in $recommended
order by $movie//user_rating descending
return $movie//title)[1]



